'''
题目描述
给定一个数组A[0,1,...,n-1],请构建一个数组B[0,1,...,n-1],
其中B中的元素B[i]=A[0]*A[1]*...*A[i-1]*A[i+1]*...*A[n-1]。
不能使用除法。（注意：规定B[0] = A[1] * A[2] * ... * A[n-1]，B[n-1] = A[0] * A[1] * ... * A[n-2];）
对于A长度为1的情况，B无意义，故而无法构建，因此该情况不会存在。
示例1
输入[1,2,3,4,5]
返回值[120,60,40,30,24]
'''


class Solution:
    # 时间复杂度O(n)，空间复杂度O(n)，数组B
    # 结果集中任何一个元素 = 其左边所有元素的乘积 * 其右边所有元素的乘积。
    # 一轮循环构建左边的乘积并保存在结果集中，二轮循环构建右边乘积的过程，乘以左边的乘积，并将最终结果保存。
    def multiply(self, A):
        n = len(A)
        if n == 1:
            return
        B = [1] * n
        for i in range(1, n):
            B[i] = B[i - 1] * A[i - 1]
        tmp = 1
        for i in range(n - 2, -1, -1):
            tmp *= A[i + 1]
            B[i] *= tmp
        return B


if __name__ == '__main__':
    u = Solution()
    A1 = [1]
    A2 = [1, 2, 3, 4, 5]
    print(u.multiply(A1))
    print(u.multiply(A2))
